{"version":3,"sources":["redux/reducers/weatherDataReducer.jsx","redux/reducers/FCReducer.jsx","redux/reducers/errorReducer.jsx","redux/reducers/index.js","redux/sagas/FCSaga.jsx","redux/sagas/locationSaga.jsx","redux/sagas/index.js","components/UserInput/UserInput.jsx","components/Nav/Nav.js","components/FCConverterButton/FCConverterButton.jsx","components/Footer/Footer.js","components/WeatherDisplay/WeatherCards.jsx","components/WeatherDisplay/CurrentWeather.jsx","components/WeatherDisplay/WeatherDisplay.jsx","components/App/App.js","index.js","components/icons/day.svg"],"names":["weatherDataReducer","state","action","type","payload","FCReducer","console","log","errorReducer","rootReducer","combineReducers","saveFahrenheitState","FCSaga","put","takeLatest","getLocation","locationSaga","axios","get","locationResponse","data","response","status","rootSaga","all","UserInput","location","handleChange","event","setState","target","value","handleClick","preventDefault","swal","props","dispatch","TextField","onChange","this","id","label","variant","className","size","Button","onClick","color","Component","connect","Grid","container","spacing","item","sm","xs","Typography","src","dayIcon","alt","FCConverterButton","fahrenheit","a","fahrenheitState","sendState","reduxState","length","withStyles","theme","root","flexGrow","card","height","width","Footer","WeatherCards","classes","icon","displayWeatherIcon","displayConditions","Box","Card","CardContent","displayDate","displayHighTemperatureC","displayLowTemperatureC","displayHighTemperatureF","displayLowTemperatureF","CurrentWeather","displayCurrentTemperatureC","displayCurrentWeatherIcon","displayCurrentCondition","displayLocationCity","displayLocationRegion","displayLastUpdated","displayCurrentTemperatureF","WeatherDisplay","today","tomorrow","twoDay","getDate","Date","setDate","dd","ee","ff","monthName","mm","getMonth","nn","oo","yyyy","getFullYear","zzzz","aaaa","dayName","dayOfWeek","getDay","tomorrowDayOfWeek","twoDayDayOfWeek","currentTemperatureF","currentTemperatureC","currentCondition","currentWeatherIcon","lastUpdated","todayTemperatureMaxF","todayTemperatureMaxC","todayTemperatureLowF","todayTemperatureLowC","todayCondition","todayWeatherIcon","todayDate","tomorrowTemperatureMaxF","tomorrowTemperatureMaxC","tomorrowTemperatureLowF","tomorrowTemperatureLowC","tomorrowCondition","tomorrowWeatherIcon","tomorrowDate","twoDayTemperatureMaxF","twoDayTemperatureMaxC","twoDayTemperatureLowF","twoDayTemperatureLowC","twoDayCondition","twoDayWeatherIcon","twoDayDate","locationCity","locationRegion","currentWeather","current","todayWeather","forecast","forecastday","day","tomorrowWeather","twoDayWeather","name","region","temp_f","temp_c","condition","text","last_updated","maxtemp_f","maxtemp_c","mintemp_f","mintemp_c","md","control","padding","App","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2ce9c132.chunk.js","sourcesContent":["// Returns the data from the Weather API\nconst weatherDataReducer = (state = [], action) => {\n    if (action.type === 'SET_WEATHER_DATA') {\n        return action.payload\n    }\n\n    return state;\n};\n\n\n\nexport default weatherDataReducer;","const FCReducer = (state = [], action) => {\n    if (action.type === 'SAVE_FAHRENHEIT_STATE'){\n        console.log('FCReducer action: ', action.payload.action)\n        return action.payload.action\n    }\n    else {\n        return state;\n    }\n};\n\nexport default FCReducer;","const errorReducer = (state = [], action) => {\n    // if (action.type === 'RESET_ERROR'){\n    //     return state\n    // }\n    if (action.type === 'LOCATION_ERROR') {\n        console.log('There was an error finding location', action.action);\n        return action.action\n    }\n\n    return state;\n};\n\n\n\nexport default errorReducer;","import { combineReducers } from 'redux';\nimport weatherDataReducer from './weatherDataReducer';\nimport FCReducer from './FCReducer';\nimport errorReducer from './errorReducer';\n\nconst rootReducer = combineReducers({\n  weatherDataReducer,\n  FCReducer,\n  errorReducer,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\n\n\nfunction* saveFahrenheitState(action) {\n    try {\n        yield put({ type: 'SAVE_FAHRENHEIT_STATE', payload: action})\n    } catch (error) {\n        console.log('Error with Save FahrenheitState Saga: ', error);\n    }\n    \n} // end saveFahrenheitState\n\n// Watcher Saga\nfunction* FCSaga() {\n    yield takeLatest('SET_FAHRENHEIT_STATE', saveFahrenheitState)\n} // end Watcher Saga newNamesSaga\n\nexport default FCSaga;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// Send location to location.router\nfunction* getLocation(action) {\n\n    try {\n        const locationResponse = yield axios.get(`/api/location?tag=${action.payload}`)\n        yield put({ type: 'SET_WEATHER_DATA', payload: locationResponse.data })\n    } catch (error) {\n        console.log('error in getLocation Saga', error.response.status);\n        if (error.response.status === 500 ) {\n            yield put({ type: 'LOCATION_ERROR', action: error.response.status })\n        }\n    }\n} // end getLocation Saga\n\n// Watcher Saga\nfunction* locationSaga() {\n    yield takeLatest('SEARCH_LOCATION', getLocation)   \n} // end Watcher Saga newNamesSaga\n\n\n\nexport default locationSaga;","import { all } from 'redux-saga/effects';\nimport FCSaga from './FCSaga';\nimport locationSaga from './locationSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    FCSaga(),\n    locationSaga(),\n  ]);\n}\n","// ========== REACT ========== // \nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\n// ========== STYLES ========== //\nimport \"./UserInput.css\";\nimport swal from 'sweetalert';\n\n// ========== PAGE ELEMENTS ========== //\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\n\nclass UserInput extends Component {\n\n    state = {\n        location: '',\n    }\n\n    // Changes State To What is Being Typed By The User Into The Input\n    handleChange = (event) => {\n        this.setState({\n            location: event.target.value,\n        })\n    }\n\n    // Handles Click Event When Submit Button Is Pressed After Typing Text Into The Input\n    handleClick = (event) => {\n        event.preventDefault();\n\n        // Alert For Empty Input Field\n        if (this.state.location === '') {\n            swal(\"Howdy, Friend\", \"You'll need to enter a location before we can provide your weather info.\")\n        }\n\n        else {\n            this.props.dispatch({\n                type: 'SEARCH_LOCATION',\n                payload: this.state.location,\n            })\n        }\n\n    } // End function handleClick\n\n    render() {\n        return (\n            <div>\n                <span >\n                    <form>\n                        <TextField\n                            onChange={this.handleChange}\n                            id=\"filled-basic\"\n                            label=\"Search City or Zip\"\n                            variant=\"outlined\"\n                            className=\"input\"\n                            size=\"small\"\n                        />\n                        <Button\n                            onClick={this.handleClick}\n                            size=\"small\"\n                            className=\"submitButton\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                        >\n                            Submit\n                        </Button>\n                    </form>\n                </span>\n            </div>\n        ) // end return\n    } // end render\n} // end class\n\nexport default connect()(UserInput);","// ========== REACT ========== //\nimport React from \"react\";\n// import { Link } from 'react-router-dom';\nimport { connect } from \"react-redux\";\n\n// ========== COMPONENTS ========== //\nimport UserInput from \"../UserInput/UserInput\";\n\n// ========== STYLES & MUI ========== //\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport dayIcon from \"../icons/day.svg\";\nimport \"./Nav.css\";\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Grid container spacing={1}>\n      <Grid item sm={6} xs={12}>\n        {/* <h1> */}\n          <Typography variant=\"h4\" className=\"nav-title\">\n            <img src={dayIcon} alt=\"spinning sun icon\" />\n            SunSpotter\n          </Typography>\n        {/* </h1> */}\n      </Grid>\n      <Grid item sm={6} xs={12}>\n        <div className=\"location-input-form\">\n          <UserInput />\n        </div>\n      </Grid>\n    </Grid>\n  </div>\n);\n\nconst mapStateToProps = (state) => ({});\n\nexport default connect(mapStateToProps)(Nav);\n","// ========== REACT ========== //\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\n// ========== MATERIAL UI ========== //\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 2,\n    },\n    card: {\n        height: 200,\n        width: 300,\n    }\n});\n\nclass FCConverterButton extends Component {\n\n    state = {\n        fahrenheit: true,\n    }\n\n    handleClick = async () => { \n        await this.setState((fahrenheitState) => ({\n                fahrenheit: !fahrenheitState.fahrenheit\n            }));\n            this.sendState()\n    }\n\n    sendState = () => {\n        this.props.dispatch({ type: 'SET_FAHRENHEIT_STATE', action: this.state.fahrenheit })\n    }\n\n    render() {\n\n        if (this.props.reduxState.weatherDataReducer.length === 0){\n            return (\n                <div></div>\n            )\n        }\n        else if (this.state.fahrenheit === false) {\n            return (\n                <div>\n                    <Button\n                        onClick={this.handleClick}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                    >\n                        Convert To Fahrenheit\n                </Button>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <Button\n                        onClick={this.handleClick}\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        Convert To Celcius\n                </Button>\n                </div>\n            )\n        }\n    }\n}\n\nconst mapStateToProps = (reduxState) => {\n    return {\n        reduxState\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(FCConverterButton));","import React from 'react';\nimport './Footer.css';\nimport FCConverterButton from '../FCConverterButton/FCConverterButton';\n\nconst Footer = () => (\n  <footer>\n    <FCConverterButton />\n    <div>&copy; Pete St. Martin</div>\n  </footer>\n);\n\nexport default Footer;\n","// ========== WeatherCards ========== //\n// Child of WeatherDisplay.jsx\n\n// ========== REACT ========== //\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// ========== MATERIAL UI ========== //\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\n// ========== STYLES ========== //\nimport './WeatherDisplay.css';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 2,\n    },\n    card: {\n        height: 200,\n        width: 300,\n    }\n});\n\nclass WeatherCards extends Component {\n\n    render () {\n        const { classes } = this.props;\n        let icon = <img src={this.props.displayWeatherIcon} alt={this.props.displayConditions}/>;\n\n        if (this.props.reduxState.weatherDataReducer.length === 0) {\n            icon = '';\n        }\n\n        if (this.props.reduxState.weatherDataReducer.length === 0) {\n            return null;\n        }\n        else if (this.props.reduxState.FCReducer===false){\n            return (\n                <div>\n                    <Box className='weatherDisplayCard'>\n                        <Card\n                            className={classes.card}\n                        >\n                            <CardContent>\n                                <Typography>\n                                    {this.props.displayDate}\n                                </Typography>\n                                {icon}\n                                <Typography>\n                                    {this.props.displayConditions}\n                                </Typography>\n                                <Typography>\n                                    High {this.props.displayHighTemperatureC}ºC\n                                </Typography>\n                                <Typography>\n                                    Low {this.props.displayLowTemperatureC}ºC\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Box>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <Box className='weatherDisplayCard'>\n                        <Card\n                            className={classes.card}\n                        >\n                            <CardContent>\n                                <Typography>\n                                    {this.props.displayDate}\n                                </Typography>\n                                    {icon}\n                                <Typography>\n                                    {this.props.displayConditions}\n                                </Typography>\n                                <Typography>\n                                    High {this.props.displayHighTemperatureF}ºF\n                                </Typography>\n                                <Typography>\n                                    Low {this.props.displayLowTemperatureF}ºF\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Box>\n                </div>\n            )\n        }\n    }\n}\n\nconst mapStateToProps = (reduxState) => {\n    return {\n        reduxState\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(WeatherCards));","// ========== Current Weather ========== //\n// Child of WeatherDisplay.jsx\n\n// ========== REACT ========== //\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// ========== MATERIAL UI ========== //\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\n// ========== STYLES ========== //\nimport './WeatherDisplay.css';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 2,\n    },\n    card: {\n        height: 200,\n        width: 300,\n    }\n});\n\nclass CurrentWeather extends Component {\n\n    render() {\n        const { classes } = this.props;\n        if (this.props.reduxState.weatherDataReducer.length === 0) {\n            return null;\n        }\n        else if (this.props.reduxState.FCReducer === false) {\n            return (\n                <div>\n                    <Box className=\"current-weather-display\">\n                        <Card\n                            className={classes.card}\n                        >\n                            <CardContent>\n                                <Typography>\n                                    Current Temp {this.props.displayCurrentTemperatureC}ºC\n                                </Typography>\n                                <img src={this.props.displayCurrentWeatherIcon} alt={this.props.displayCurrentCondition} />\n                                <Typography>\n                                    {this.props.displayCurrentCondition}\n                                </Typography>\n                                <Typography>\n                                    {this.props.displayLocationCity} - {this.props.displayLocationRegion}\n                                </Typography>\n                                <Typography>\n                                    Updated {this.props.displayLastUpdated}\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Box>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <Box className=\"current-weather-display\">\n                        <Card\n                            className={classes.card}\n                        >\n                            <CardContent>\n                                <Typography>\n                                    Current Temp {this.props.displayCurrentTemperatureF}ºF\n                                </Typography>\n                                <img src={this.props.displayCurrentWeatherIcon} alt={this.props.displayCurrentCondition} />\n                                <Typography>\n                                    {this.props.displayCurrentCondition} \n                                </Typography>\n                                <Typography>\n                                    {this.props.displayLocationCity} - {this.props.displayLocationRegion}\n                                </Typography>\n                                <Typography>\n                                    Updated {this.props.displayLastUpdated}\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Box>\n                </div>\n            )\n        }\n        \n    }\n}\n\nconst mapStateToProps = (reduxState) => {\n    return {\n        reduxState\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(CurrentWeather));","// ========== REACT ========== //\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// ========== COMPONENTS ========== //\nimport WeatherCards from './WeatherCards';\nimport CurrentWeather from './CurrentWeather';\n\n\n// ========== MATERIAL UI ========== //\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\n\n// ========== STYLES ========== //\nimport './WeatherDisplay.css';\nimport swal from 'sweetalert';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 0,\n    },\n    control: {\n        padding: theme.spacing(2),\n    }\n});\n\nclass WeatherDisplay extends Component {\n\n    componentDidMount() {\n        this.getDate();\n    }\n\n    state = {\n        today: '',\n        tomorrow: '',\n        twoDay: '',\n    }\n\n    getDate = () => {\n        let today = new Date();\n        let tomorrow = new Date(today);\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        let twoDay = new Date(tomorrow);\n        twoDay.setDate(twoDay.getDate() + 1);\n        let dd = today.getDate();\n        let ee = tomorrow.getDate();\n        let ff = twoDay.getDate();\n        let monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        let mm = monthName[today.getMonth()];  //January=0\n        let nn = monthName[tomorrow.getMonth()];\n        let oo = monthName[twoDay.getMonth()];\n        let yyyy = today.getFullYear();\n        let zzzz = tomorrow.getFullYear();\n        let aaaa = twoDay.getFullYear(); \n        let dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n        let dayOfWeek = dayName[today.getDay()];\n        let tomorrowDayOfWeek = dayName[tomorrow.getDay()];\n        let twoDayDayOfWeek = dayName[twoDay.getDay()];\n\n\n        today = `Today: ${dayOfWeek} ${mm} ${dd}, ${yyyy}`;\n        tomorrow = `Tomorrow: ${tomorrowDayOfWeek} ${nn} ${ee}, ${zzzz}`;\n        twoDay = `${twoDayDayOfWeek} ${oo} ${ff}, ${aaaa}`;\n        this.setState({\n            today: today,\n            tomorrow: tomorrow,\n            twoDay: twoDay,\n        })\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        // Declarations //\n        let currentTemperatureF;\n        let currentTemperatureC;\n        let currentCondition;\n        let currentWeatherIcon;\n        let lastUpdated;\n        let todayTemperatureMaxF;\n        let todayTemperatureMaxC;\n        let todayTemperatureLowF;\n        let todayTemperatureLowC\n        let todayCondition;\n        let todayWeatherIcon;\n        let todayDate;\n        let tomorrowTemperatureMaxF;\n        let tomorrowTemperatureMaxC\n        let tomorrowTemperatureLowF;\n        let tomorrowTemperatureLowC;\n        let tomorrowCondition;\n        let tomorrowWeatherIcon;\n        let tomorrowDate;\n        let twoDayTemperatureMaxF;\n        let twoDayTemperatureMaxC;\n        let twoDayTemperatureLowF;\n        let twoDayTemperatureLowC;\n        let twoDayCondition;\n        let twoDayWeatherIcon;\n        let twoDayDate;\n        let locationCity;\n        let locationRegion;\n\n        if (this.props.reduxState.errorReducer === 500){\n            console.log('weatherDataReducer length', this.props.reduxState.weatherDataReducer.length)\n            console.log('this.props.reduxState.errorReducer', this.props.reduxState.errorReducer)\n            swal(\"Location Error\", \"There were no results from the entered location. Please try again.\")\n            this.props.dispatch({\n                type: 'SET_WEATHER_DATA',\n                payload: '',\n            })\n            this.props.dispatch({\n                type: 'LOCATION_ERROR',\n                action: 'reset'\n            })\n        }\n\n        else if (this.props.reduxState.weatherDataReducer.length !== 0 ) {\n            \n\n            let weatherDataReducer = this.props.reduxState.weatherDataReducer;\n            let currentWeather = weatherDataReducer.current;\n            let todayWeather = weatherDataReducer.forecast.forecastday[0].day;\n            let tomorrowWeather = weatherDataReducer.forecast.forecastday[1].day;\n            let twoDayWeather = weatherDataReducer.forecast.forecastday[2].day;\n\n            // Dates\n            todayDate = this.state.today;\n            tomorrowDate = this.state.tomorrow;\n            twoDayDate = this.state.twoDay;\n\n            // Location\n            locationCity = weatherDataReducer.location.name;\n            locationRegion = weatherDataReducer.location.region;\n\n            // Current\n            currentTemperatureF = currentWeather.temp_f;\n            currentTemperatureC = currentWeather.temp_c;\n            currentCondition = currentWeather.condition.text;\n            currentWeatherIcon = currentWeather.condition.icon;\n            lastUpdated = currentWeather.last_updated;\n            // Today\n            todayTemperatureMaxF = todayWeather.maxtemp_f;\n            todayTemperatureMaxC = todayWeather.maxtemp_c;\n            todayTemperatureLowF = todayWeather.mintemp_f;\n            todayTemperatureLowC = todayWeather.mintemp_c;\n            todayCondition = todayWeather.condition.text;\n            todayWeatherIcon = todayWeather.condition.icon;\n            // Tomorrow\n            tomorrowTemperatureMaxF = tomorrowWeather.maxtemp_f;\n            tomorrowTemperatureMaxC = tomorrowWeather.maxtemp_c;\n            tomorrowTemperatureLowF = tomorrowWeather.mintemp_f;\n            tomorrowTemperatureLowC = tomorrowWeather.mintemp_c;\n            tomorrowCondition = tomorrowWeather.condition.text;\n            tomorrowWeatherIcon = tomorrowWeather.condition.icon;\n            // Two Day\n            twoDayTemperatureMaxF = twoDayWeather.maxtemp_f;\n            twoDayTemperatureMaxC = twoDayWeather.maxtemp_c;\n            twoDayTemperatureLowF = twoDayWeather.mintemp_f;\n            twoDayTemperatureLowC = twoDayWeather.mintemp_c;\n            twoDayCondition = twoDayWeather.condition.text;\n            twoDayWeatherIcon = tomorrowWeather.condition.icon;\n\n        }\n\n\n        return (\n            <div>\n                {this.props.todayDate}\n                <Grid \n                    container\n                    className={classes.root} \n                    spacing={1}\n                >\n                    <Grid item xs={12} md={12}>\n                        {/* Current Weather */}\n                        <CurrentWeather\n                            displayDate={todayDate}\n                            displayCurrentTemperatureF={currentTemperatureF}\n                            displayCurrentTemperatureC={currentTemperatureC}\n                            displayCurrentCondition={currentCondition}\n                            displayCurrentWeatherIcon={currentWeatherIcon}\n                            displayLastUpdated={lastUpdated}\n                            displayLocationCity={locationCity}\n                            displayLocationRegion={locationRegion}\n                        />\n\n                    </Grid>\n                    <Grid item sm={12} md={3}>\n                        {/* Today's Low and High */}\n                        <WeatherCards\n                            displayDate={todayDate}\n                            displayHighTemperatureF={todayTemperatureMaxF}\n                            displayHighTemperatureC={todayTemperatureMaxC}\n                            displayLowTemperatureF={todayTemperatureLowF}\n                            displayLowTemperatureC={todayTemperatureLowC}\n                            displayConditions={todayCondition}\n                            displayWeatherIcon={todayWeatherIcon}\n                        />\n                    </Grid>\n                    <Grid item sm={12} sm={3}>\n                        {/* Tomorrow's Weather */}\n                        <WeatherCards\n                            displayDate={tomorrowDate}\n                            displayHighTemperatureF={tomorrowTemperatureMaxF}\n                            displayHighTemperatureC={tomorrowTemperatureMaxC}\n                            displayLowTemperatureF={tomorrowTemperatureLowF}\n                            displayLowTemperatureC={tomorrowTemperatureLowC}\n                            displayConditions={tomorrowCondition}\n                            displayWeatherIcon={tomorrowWeatherIcon}\n                        />\n                    </Grid>\n                    <Grid item sm={12} md={3}>\n                        {/* Two Day Weather */}\n                        <WeatherCards\n                            displayDate={twoDayDate}\n                            displayHighTemperatureF={twoDayTemperatureMaxF}\n                            displayHighTemperatureC={twoDayTemperatureMaxC}\n                            displayLowTemperatureF={twoDayTemperatureLowF}\n                            displayLowTemperatureC={twoDayTemperatureLowC}\n                            displayConditions={twoDayCondition}\n                            displayWeatherIcon={twoDayWeatherIcon}\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (reduxState) => {\n    return {\n        reduxState\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(WeatherDisplay));","// ========== REACT ========== //\nimport React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\n\n// ========== COMPONENTS ========== //\nimport Nav from \"../Nav/Nav\";\nimport Footer from \"../Footer/Footer\";\nimport WeatherDisplay from \"../WeatherDisplay/WeatherDisplay\";\n\n// ========== MATERIAL UI ========== //\nimport { withStyles } from '@material-ui/core/styles';\n\n// ========== STYLES ========== //\nimport \"./App.css\";\n\nconst styles = (theme) => ({\n  root: {\n    flexGrow: 2,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n});\n\nclass App extends Component {\n  componentDidMount() {\n    \n  }\n\n  render() {\n\n    return (\n      <div>\n        <Nav />\n        <WeatherDisplay />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(connect()(App));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if you're in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n","module.exports = __webpack_public_path__ + \"static/media/day.7f93fbdb.svg\";"],"sourceRoot":""}